# script for stm32h7x family

#
# stm32h7 devices support both JTAG and SWD transports.
#

# Configuration variables (default values) :
#   CHIPNAME            (stm32h7x)
#   WORKAREASIZE        (0x10000)
#   CPUTAPID            (jtag ? 0x6ba00477 : 0x6ba02477)
#   DUAL_BANK           (0)
#   DUAL_CORE           (0)
#     DBG_CM7           (1)
#     DBG_CM4           (DUAL_CORE ? 1 : 0)
#   USE_CTI             (0)
#     CM7_CAN_HALT      (USE_CTI && CM7 ? 1 : 0)
#     CM7_CAN_BE_HALTED (USE_CTI && CM7 ? 1 : 0)
#     CM4_CAN_HALT      (USE_CTI && CM4 ? 1 : 0)
#     CM4_CAN_BE_HALTED (USE_CTI && CM4 ? 1 : 0)
#   CORE_RESET          (1)
#   CONNECT_UNDER_RESET (0)
#   ENABLE_LOW_POWER    (0)
#   STOP_WATCHDOG       (0)
#   CLOCK_FREQ          (4000)
#   AP_NUM              .

# Error cases:
# using_hla
# DUAL_CORE=0 and (USE_CTI=0 or CM4=1)
# DBG_CM7=0 and DBG_CM4=0
# USE_CTI=0 and (CMx_CAN_HALT=1 or CMx_CAN_BE_HALTED=1)
# DBG_CM7=0 and (CM7_CAN_HALT=1 or CM7_CAN_BE_HALTED=1)
# DBG_CM4=0 and (CM4_CAN_HALT=1 or CM4_CAN_BE_HALTED=1)

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]
source [find gdb_helper.tcl]

set _CHIPNAME stm32h7x
if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
}
set $_CHIPNAME.DUAL_BANK 0
set $_CHIPNAME.DUAL_CORE 0
set $_CHIPNAME.USE_CTI 0

if { [info exists BOARDNAME] } {
   set _BOARDNAME $BOARDNAME
} else {
   set _BOARDNAME stm32h7x_board
}

if { [info exists DUAL_BANK] } {
	set $_CHIPNAME.DUAL_BANK $DUAL_BANK
}

if { [info exists DUAL_CORE] } {
	set $_CHIPNAME.DUAL_CORE $DUAL_CORE
}

# Issue an error when hla is used to reduce complexity
if { [set $_CHIPNAME.DUAL_CORE] && [using_hla] } {
	echo "Error : hla does not support multicore debugging"
	shutdown
}

set $_CHIPNAME.DBG_CM7 1
set $_CHIPNAME.DBG_CM4 [set $_CHIPNAME.DUAL_CORE]

if { [info exists AP_NUM] } {
	if { $AP_NUM == 0 } {
		set $_CHIPNAME.DBG_CM7 1
		set $_CHIPNAME.DBG_CM4 0
	}
	if { $AP_NUM == 3 } {
		set $_CHIPNAME.DBG_CM7 0
		set $_CHIPNAME.DBG_CM4 1
	}
}

# Issue an error when DUAL_CORE=0 and DBG_CM4=1
if { ![set $_CHIPNAME.DUAL_CORE] && [set $_CHIPNAME.DBG_CM4] } {
	echo "Error : single core device does not have a Cortex-M4"
	shutdown
}

# Issue an error when DBG_CM4=0 and DBG_CM7=0
if { ![set $_CHIPNAME.DBG_CM4] && ![set $_CHIPNAME.DBG_CM7] } {
	echo "Error: select one core at least"
	shutdown
}

if { [info exists USE_CTI] } {
	set $_CHIPNAME.USE_CTI $USE_CTI
}

# Issue an error when DUAL_CORE=0 and USE_CTI=1
if { ![set $_CHIPNAME.DUAL_CORE] && [set $_CHIPNAME.USE_CTI] } {
	echo "Error : could not use CTI with a single core device"
	shutdown
}

set $_CHIPNAME.CM7_CAN_HALT 0
set $_CHIPNAME.CM7_CAN_BE_HALTED 0
set $_CHIPNAME.CM4_CAN_HALT 0
set $_CHIPNAME.CM4_CAN_BE_HALTED 0

if { [info exists AP_0_CAN_HALT] } {
	set $_CHIPNAME.CM7_CAN_HALT $AP_0_CAN_HALT
}

if { [info exists AP_0_CAN_BE_HALTED] } {
	set $_CHIPNAME.CM7_CAN_BE_HALTED $AP_0_CAN_BE_HALTED
}

if { [info exists AP_3_CAN_HALT] } {
	set $_CHIPNAME.CM4_CAN_HALT $AP_3_CAN_HALT
}

if { [info exists AP_3_CAN_BE_HALTED] } {
	set $_CHIPNAME.CM4_CAN_BE_HALTED $AP_3_CAN_BE_HALTED
}

if { ![set $_CHIPNAME.USE_CTI] && [expr {[set $_CHIPNAME.CM7_CAN_HALT] || [set $_CHIPNAME.CM7_CAN_BE_HALTED] \
	|| [set $_CHIPNAME.CM4_CAN_HALT] || [set $_CHIPNAME.CM4_CAN_BE_HALTED]}] } {
	echo "Error: CTI configuration issue (CTI is disabled)"
	shutdown
}

if { ![set $_CHIPNAME.DBG_CM7] && [expr {[set $_CHIPNAME.CM7_CAN_HALT] || [set $_CHIPNAME.CM7_CAN_BE_HALTED]}] } {
	echo "Error: CTI configuration issue (CM7 is disabled)"
	shutdown
}

if { ![set $_CHIPNAME.DBG_CM4] && [expr {[set $_CHIPNAME.CM4_CAN_HALT] || [set $_CHIPNAME.CM4_CAN_BE_HALTED]}] } {
	echo "Error: CTI configuration issue (CM4 is disabled)"
	shutdown
}

if { [info exists CORE_RESET] } {
	set _CORE_RESET $CORE_RESET
} else {
	set _CORE_RESET 1
}

if { [info exists CONNECT_UNDER_RESET] } {
	set _CONNECT_UNDER_RESET $CONNECT_UNDER_RESET
} else {
	set _CONNECT_UNDER_RESET 0
}

if { [info exists ENABLE_LOW_POWER] } {
	set _ENABLE_LOW_POWER $ENABLE_LOW_POWER
} else {
	set _ENABLE_LOW_POWER 0
}

if { [info exists STOP_WATCHDOG] } {
	set _STOP_WATCHDOG $STOP_WATCHDOG
} else {
	set _STOP_WATCHDOG 0
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 64kB
if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
	set _WORKAREASIZE 0x10000
}

# jtag scan chain
if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	if { [using_jtag] } {
		set _CPUTAPID 0x6ba00477
	} else {
		set _CPUTAPID 0x6ba02477
	}
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if { ![using_hla] } {
	# STM32H7 provides an APB-AP at access port 2, which allows the access to
	# the debug and trace features on the system APB System Debug Bus (APB-D).
	target create $_CHIPNAME.ap2 mem_ap -dap $_CHIPNAME.dap -ap-num 2
	swo  create $_CHIPNAME.swo  -dap $_CHIPNAME.dap -ap-num 2 -baseaddr 0xE00E3000
	tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 2 -baseaddr 0xE00F5000
}

# Assigned gdb port to be used during target creation
if { [info exists AP_NUM] && [info exists GDB_PORT] } {
	if { $AP_NUM == 0 } {
		set _GDB_PORT_CM7 $GDB_PORT
		set _GDB_PORT_CM4 [expr {$GDB_PORT + 1}]
	} else {
		set _GDB_PORT_CM7 [expr {$GDB_PORT + 1}]
		set _GDB_PORT_CM4 $GDB_PORT
	}
}

# APNum definition
set _AP_NUM_CM7 0
set _AP_NUM_CM4 3

# QUADSPI initialization
# flash = 1: only flash1, = 2: only flash 2, anything else: both flash1 and flash2
# qpi: 4-line mode
proc qspi_init { flash qpi } {
	mmw 0x580244E0 0x000007FF 0				;# RCC_AHB4ENR |= GPIOA-GPIOK (enable clocks)
	mmw 0x580244D4 0x00004000 0				;# RCC_AHB3ENR |= QSPIEN (enable clock)
	sleep 1									;# Wait for clock startup

	# STM32H7[4|5]3 Eval board
	# PG06: BK1_NCS, PB02: CLK, PF06: BK1_IO3, PF7: BK1_IO2, PF9: BK1_IO1, PF8: BK1_IO0
	# PC11: BK2_NCS, PB02: CLK, PG14: BK2_IO3, PG9: BK2_IO2, PH3: BK2_IO1, PH2: BK2_IO0

	# Port B: PB02:AF09
	mmw 0x58020400 0x00000020 0x00000010    ;# MODER
	mmw 0x58020408 0x00000030 0x00000000    ;# OSPEEDR
	mmw 0x58020420 0x00000900 0x00000600    ;# AFRL

	# Port C: PC11:AF09
	mmw 0x58020800 0x00800000 0x00400000    ;# MODER
	mmw 0x58020808 0x00C00000 0x00000000    ;# OSPEEDR
	mmw 0x58020824 0x00009000 0x00006000    ;# AFRH

	# Port F: PF9:AF10, PF8:AF10, PF7:AF09, PF6:AF09
	mmw 0x58021400 0x000AA000 0x00055000    ;# MODER
	mmw 0x58021408 0x000FF000 0x00000000    ;# OSPEEDR
	mmw 0x58021420 0x99000000 0x66000000    ;# AFRL
	mmw 0x58021424 0x000000AA 0x00000055    ;# AFRH

	# Port G: PG14:AF09, PG09:AF09, PG06:AF10
	mmw 0x58021800 0x20082000 0x10041000    ;# MODER
	mmw 0x58021808 0x300C3000 0x00000000    ;# OSPEEDR
	mmw 0x58021820 0x0A000000 0x05000000    ;# AFRL
	mmw 0x58021824 0x09000090 0x06000060    ;# AFRH

	# Port H: PH3:AF09, PH2:AF09
	mmw 0x58021C00 0x000000A0 0x00000050    ;# MODER
	mmw 0x58021C08 0x000000F0 0x00000000    ;# OSPEEDR
	mmw 0x58021C20 0x00009900 0x00006600    ;# AFRL

	# correct FSIZE would be 0x19 or 0x1A, however, this causes trouble when
	# reading the last word at end of bank in memory mapped mode
	# increase fsize as a workaround

	if { $flash == 1 } {
		# for flash 1 only on twin QSPI MT25TL01G
		mww 0x52005000 0x05400018			;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=0, DFM=0, SSHIFT=1, TCEN=1
		mww 0x52005004 0x00190100			;# QUADSPI_DCR: FSIZE=0x19, CSHT=0x01, CKMODE=0
	} else {
		if { $flash == 2 } {
			# for flash 2 only on twin QSPI MT25TL01G
			mww 0x52005000 0x05400098		;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=1, DFM=0, SSHIFT=1, TCEN=1
			mww 0x52005004 0x00190100		;# QUADSPI_DCR: FSIZE=0x19, CSHT=0x01, CKMODE=0
		} else {
			# for dual flash mode MT25TL01G
			mww 0x52005000 0x05400058		;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=0, DFM=1, SSHIFT=1, TCEN=1
			mww 0x52005004 0x001A0100		;# QUADSPI_DCR: FSIZE=0x1A, CSHT=0x01, CKMODE=0
		}
	}

	mww 0x52005014 0x0D002503				;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1
	mmw 0x52005000 0x00000001 0				;# QUADSPI_CR: EN=1

	# Exit QPI mode
	mww 0x52005014 0x000003FF				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x3, INSTR=Exit QPI
	sleep 1

	# Enter 4-byte mode
	mww 0x52005014 0x000001B7				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Enter 4-byte
	sleep 1

	if { $qpi == 1 } {
		# Enter QPI mode
		mww 0x52005014 0x00000138			;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Enter QPI
		sleep 1

		# memory-mapped fast read mode with 4-byte addresses and 2 dummy cycles (for read only)
		mww 0x52005014 0x0F083F0B			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x3, DCYC=0x2, ADSIZE=0x3, ADMODE=0x3, IMODE=0x3, INSTR=Fast READ

		# as QSPI is set to instruction/address/data on 4 lines in memory mapped mode, driver will *always*
		# use this setting (i. e. for probe, erase, write)
		# the 'Enter QPI mode' command is chip specific, additionally both w25q256fv must be configured in advance by
		# programming the non-volatile QE bit (bit 1 in status register 2), e. g. by the following commands
		#
		# stmqspi spicmd 2 0 0x06
		# stmqspi spicmd 2 0 0x31 0x02 0x02
		# stmqspi spicmd 2 2 0x35
		#
		# the last one should return  '-> 02 02' to indicate successful setting of QE bit
		# furthemore, the flash chip changes id from 0x1940ef to 0x1960ef upon entering QPI mode
	} else {
		# memory-mapped read mode with 4-byte addresses
		mww 0x52005014 0x0D003503			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1, INSTR=READ
	}
}

if { [set $_CHIPNAME.DBG_CM7] } {
	if { [info exists _GDB_PORT_CM7] } {
		target create $_CHIPNAME.cm7 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM7 -gdb-port $_GDB_PORT_CM7 -gdb-max-connections 2
	} else {
		target create $_CHIPNAME.cm7 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM7 -gdb-max-connections 2
	}

	if { ![using_hla] } {
		if { $_CORE_RESET == 1 } {
			$_CHIPNAME.cm7 cortex_m reset_config vectreset
		} else {
			$_CHIPNAME.cm7 cortex_m reset_config sysresetreq
		}

		# create CTI to be able to stop a CTI previously started on board. Even if we do not use CTI.
		cti create $_CHIPNAME.cm7_cti -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM7 -baseaddr 0xE0043000
	}

	if { [set $_CHIPNAME.DUAL_CORE] } {
		# avoid reseting the target in dual core mode
		$_CHIPNAME.cm7 configure -event gdb-flash-erase-start "soft_reset_halt"
		$_CHIPNAME.cm7 configure -event gdb-flash-write-end "soft_reset_halt"
	}

	$_CHIPNAME.cm7 configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 1

	flash bank $_CHIPNAME.bank1.cm7 stm32h7x 0x08000000 0 0 0 $_CHIPNAME.cm7

	if { [set $_CHIPNAME.DUAL_BANK] } {
		flash bank $_CHIPNAME.bank2.cm7 stm32h7x 0x08100000 0 0 0 $_CHIPNAME.cm7
	}

	if { [regexp -nocase {STM32H753I-EVAL} $_BOARDNAME] || [regexp -nocase {STM32H743I-EVAL} $_BOARDNAME] } {
		set _QSPINAME $_CHIPNAME.qspi
		flash bank $_QSPINAME stmqspi 0x90000000 0 0 0 $_CHIPNAME.cm7 0x52005000
	}

	$_CHIPNAME.cm7 configure -event examine-end {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { ![using_hla] } {
			# Disable corresponding CTI by default
			stm32h7x_cti_stop_one cm7_cti
		
			stm32h7x_dbgmcu_init
		}

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_start_cm7_cti
		}
	}

	$_CHIPNAME.cm7 configure -event reset-init {
		global _CLOCK_FREQ
		global _BOARDNAME

		if { [regexp -nocase {STM32H753I-EVAL} $_BOARDNAME] || [regexp -nocase {STM32H743I-EVAL} $_BOARDNAME] } {
			qspi_init 0 0
		}

		adapter speed $_CLOCK_FREQ
	}

	$_CHIPNAME.cm7 configure -event reset-end {

		if { [using_hla] } {
			stm32h7x_dbgmcu_init
		}
	}

	$_CHIPNAME.cm7 configure -event resume-start {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_prepare_restart_one cm7_cti
		}
	}

	$_CHIPNAME.cm7 configure -event halted { 
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_prepare_restart_one cm7_cti
		}
	}

	proc first_gdb_attach_hook {} {
		global _CHIPNAME
		global $_CHIPNAME.DUAL_CORE
		global _CONNECT_UNDER_RESET

		# Needed to be able to use the connect_assert_srst in reset_config
		if { $_CONNECT_UNDER_RESET == 1 } {
			reset init
		} else {
			if { [set $_CHIPNAME.DUAL_CORE] } {
				soft_reset_halt
			}
		}
	}

	proc last_gdb_detach_hook {} {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_stop_one cm7_cti
		}

		# Disable CM7 slave port in SWO trace Funnel
		# Hack, use stm32h7x_dbgmcu_mmw with big offset to control SWTF
		# SWTF_CTRL |= ~ENS0
		stm32h7x_dbgmcu_mmw 0x3000 0 0x00000001

		# to close connection if debug mode entered
		if { [info exists AP_NUM] && ($AP_NUM == 0) } {
			shutdown
		}
	}

	$_CHIPNAME.cm7 configure -event gdb-attach { gdb_attach_hook }
	$_CHIPNAME.cm7 configure -event gdb-detach { gdb_detach_hook }
}

if { [set $_CHIPNAME.DBG_CM4] } {
	if { [info exists _GDB_PORT_CM4] } {
		target create $_CHIPNAME.cm4 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM4 -gdb-port $_GDB_PORT_CM4 -gdb-max-connections 2
	} else {
		target create $_CHIPNAME.cm4 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM4 -gdb-max-connections 2
	}

	if { ![using_hla] } {
		if { $_CORE_RESET == 1 } {
			$_CHIPNAME.cm4 cortex_m reset_config vectreset
		} else {
			$_CHIPNAME.cm4 cortex_m reset_config sysresetreq
		}
	}

	# create CTI to be able to stop a CTI previously started on board. Even if we do not use CTI.
	cti create $_CHIPNAME.cm4_cti -dap $_CHIPNAME.dap -ap-num $_AP_NUM_CM4 -baseaddr 0xE0043000

	$_CHIPNAME.cm4 configure -work-area-phys 0x38000000 -work-area-size $_WORKAREASIZE -work-area-backup 1

	# avoid reseting the target in dual core mode
	$_CHIPNAME.cm4 configure -event gdb-flash-erase-start "soft_reset_halt"
	$_CHIPNAME.cm4 configure -event gdb-flash-write-end "soft_reset_halt"

	if { [regexp -nocase {STM32H745.G..} $_CHIPNAME] || [regexp -nocase {STM32H747.G..} $_CHIPNAME] } {
		flash bank $_CHIPNAME.bank1.cm4 stm32h7x 0x08000000 0x80000 0 0 $_CHIPNAME.cm4

		if { [set $_CHIPNAME.DUAL_BANK] } {
			flash bank $_CHIPNAME.bank2.cm4 stm32h7x 0x08100000 0x80000 0 0 $_CHIPNAME.cm4
		}
	} else {
		flash bank $_CHIPNAME.bank1.cm4 stm32h7x 0x08000000 0 0 0 $_CHIPNAME.cm4

		if { [set $_CHIPNAME.DUAL_BANK] } {
			flash bank $_CHIPNAME.bank2.cm4 stm32h7x 0x08100000 0 0 0 $_CHIPNAME.cm4
		}
	}
	if { $AP_NUM == 0 } {
		# Make sure that cm7 is selected
		targets $_CHIPNAME.cm7
	}

	$_CHIPNAME.cm4 configure -event examine-end {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		# Disable corresponding CTI
		stm32h7x_cti_stop_one cm4_cti

		stm32h7x_dbgmcu_init

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_start_cm4_cti
		}
	}

	$_CHIPNAME.cm4 configure -event reset-init {
		global _CLOCK_FREQ

		# Clock after reset is HSI at 64 MHz, no need of PLL
		adapter speed $_CLOCK_FREQ
	}

	$_CHIPNAME.cm4 configure -event resume-start {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_prepare_restart_one cm4_cti
		}
	}

	$_CHIPNAME.cm4 configure -event halted {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_prepare_restart_one cm4_cti
		}
	}

	proc first_gdb_attach_hook {} {
		global _CONNECT_UNDER_RESET

		# Needed to be able to use the connect_assert_srst in reset_config
		if { $_CONNECT_UNDER_RESET == 1 } {
			reset init
		} else {
			soft_reset_halt
		}
	}

	proc last_gdb_detach_hook {} {
		global _CHIPNAME
		global $_CHIPNAME.USE_CTI

		if { [set $_CHIPNAME.USE_CTI] } {
			stm32h7x_cti_stop_one cm4_cti
		}

		# Disable CM4 slave port in SWO trace Funnel
		# Hack, use stm32h7x_dbgmcu_mmw with big offset to control SWTF
		# SWTF_CTRL |= ~ENS1
		stm32h7x_dbgmcu_mmw 0x3000 0 0x00000002

		# to close connection if debug mode entered
		if { [info exists AP_NUM] && ($AP_NUM == 3) } {
			shutdown
		}
	}

	$_CHIPNAME.cm4 configure -event gdb-attach { gdb_attach_hook }
	$_CHIPNAME.cm4 configure -event gdb-detach { gdb_detach_hook }
}

adapter srst delay 100
if { [using_jtag] } {
	jtag_ntrst_delay 100
}

if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 4000
}
adapter speed $_CLOCK_FREQ

# The STM32H7 does not support connect_assert_srst mode because the AXI is
# unavailable while SRST is asserted, and that is used to access the DBGMCU
# component at 0x5C001000 in the examine-end event handler.
#
# It is possible to access the DBGMCU component at 0xE00E1000 via AP2 instead
# of the default AP0, and that works with SRST asserted; however, nonzero AP
# usage does not work with HLA, so is not done by default. That change could be
# made in a local configuration file if connect_assert_srst mode is needed for
# a specific application and a non-HLA adapter is in use.

if { ![using_hla] } {
	# Set CSW[27], which according to ARM ADI v5 appendix E1.4 maps to AHB signal
	# HPROT[3], which according to AMBA AHB/ASB/APB specification chapter 3.7.3
	# makes the data access cacheable. This allows reading and writing data in the
	# CPU cache from the debugger, which is far more useful than going straight to
	# RAM when operating on typical variables, and is generally no worse when
	# operating on special memory locations.
	$_CHIPNAME.dap apcsw 0x08000000 0x08000000
}

# like mrw, but with target selection
proc stm32h7x_mrw {used_target reg} {
	set value ""
	$used_target mem2array value 32 $reg 1
	return $value(0)
}

# like mmw, but with target selection
proc stm32h7x_mmw {used_target reg setbits clearbits} {
	set old [stm32h7x_mrw $used_target $reg]
	set new [expr {($old & ~$clearbits) | $setbits}]
	$used_target mww $reg $new
}

# mmw for dbgmcu component registers, it accepts the register offset from dbgmcu base
# this procedure will use the mem_ap on AP2 whenever possible
proc stm32h7x_dbgmcu_mmw {reg_offset setbits clearbits} {
	global _CHIPNAME

	# use $_CHIPNAME.ap2 if possible, and use the proper dbgmcu base address
	if { ![using_hla] } {
		set used_target $_CHIPNAME.ap2
		set reg_addr [expr {0xE00E1000 + $reg_offset}]
	} {
		set used_target [target current]
		set reg_addr [expr {0x5C001000 + $reg_offset}]
	}

	stm32h7x_mmw $used_target $reg_addr $setbits $clearbits
}

proc stm32h7x_dbgmcu_init {} {
	global _ENABLE_LOW_POWER
	global _STOP_WATCHDOG
	
	# Enable D3 and D1 DBG clocks
	# DBGMCU_CR |= D3DBGCKEN | D1DBGCKEN
	stm32h7x_dbgmcu_mmw 0x004 0x00600000 0

	if { $_ENABLE_LOW_POWER == 1 } {
		# Enable debug during low power modes (uses more power)
		# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP in D1 Domain
		stm32h7x_dbgmcu_mmw 0x004 0x00000007 0
		# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP in D2 Domain
		stm32h7x_dbgmcu_mmw 0x004 0x00000038 0
	} else {
		# Disable debug during low power modes
		# DBGMCU_CR |= ~(DBG_STANDBY | DBG_STOP | DBG_SLEEP)
		stm32h7x_dbgmcu_mmw 0x004 0 0x0000003F
	}
	if { $_STOP_WATCHDOG == 1 } {
		# Stop watchdog counters during halt
		# DBGMCU_APB3FZ1 |= WWDG1
		stm32h7x_dbgmcu_mmw 0x034 0x00000040 0
		# DBGMCU_APB1LFZ1 |= WWDG2
		stm32h7x_dbgmcu_mmw 0x03C 0x00000800 0
		# DBGMCU_APB4FZ1 |= WDGLSD1 | WDGLSD2
		stm32h7x_dbgmcu_mmw 0x054 0x000C0000 0
	} else {
		# Don't Stop watchdog counters during halt
		# DBGMCU_APB3FZ1 |= ~WWDG1
		stm32h7x_dbgmcu_mmw 0x034 0 0x00000040
		# DBGMCU_APB1LFZ1 |= ~WWDG2
		stm32h7x_dbgmcu_mmw 0x03C 0 0x00000800
		# DBGMCU_APB4FZ1 |= ~(WDGLSD1 | WDGLSD2)
		stm32h7x_dbgmcu_mmw 0x054 0 0x000C0000
	}
	if { ($_ENABLE_LOW_POWER == 0) && ($_STOP_WATCHDOG == 0) } {
		# Disable D3 and D1 DBG clocks
		# DBGMCU_CR |= ~(DBG_CKEN_D3 | DBG_CKEN_D1)
		stm32h7x_dbgmcu_mmw 0x004 0 0x00600000
	}

	# Enable clock for tracing
	# TRACE_MODE is set to async; when using sync
	# change this value accordingly to configure trace pins assignment
	# DBGMCU_CR |= TRACECLKEN
	stm32h7x_dbgmcu_mmw 0x004 0x00100000 0
}

# CM7_CTI TRIGIN0 (HALTED) and CM4_CTI TRIGOUT0 (EDBGRQ) at CTM_CHANNEL_0
# CM7_CTI TRIGOUT0 (EDBGRQ) and CM4_CTI TRIGIN0 (HALTED) at CTM_CHANNEL_2
proc stm32h7x_cti_config_one {cti on_off can_halt can_be_halted} {
	global _CHIPNAME

	stm32h7x_cti_prepare_restart_one $cti
	$_CHIPNAME.$cti write INEN0 $can_halt
	$_CHIPNAME.$cti write OUTEN0 $can_be_halted
	$_CHIPNAME.$cti enable $on_off
}

proc stm32h7x_cti_start_cm7_cti {} {
	global _CHIPNAME
	global $_CHIPNAME.CM7_CAN_HALT
	global $_CHIPNAME.CM7_CAN_BE_HALTED

	set can_halt [expr {[set $_CHIPNAME.CM7_CAN_HALT] ? 0x1 : 0}]
	set can_be_halted [expr {[set $_CHIPNAME.CM7_CAN_BE_HALTED] ? 0x4 : 0}]

	stm32h7x_cti_config_one cm7_cti on $can_halt $can_be_halted
}

proc stm32h7x_cti_start_cm4_cti {} {
	global _CHIPNAME
	global $_CHIPNAME.CM4_CAN_HALT
	global $_CHIPNAME.CM4_CAN_BE_HALTED

	set can_halt [expr {[set $_CHIPNAME.CM4_CAN_HALT] ? 0x4 : 0}]
	set can_be_halted [expr {[set $_CHIPNAME.CM4_CAN_BE_HALTED] ? 0x1 : 0}]

	stm32h7x_cti_config_one cm4_cti on $can_halt $can_be_halted
}

proc stm32h7x_cti_stop_one {cti} {
	stm32h7x_cti_config_one $cti off 0 0
}

proc stm32h7x_cti_prepare_restart_one {cti} {
	global _CHIPNAME

	# Acknowlodge EDBGRQ at TRIGOUT0
	$_CHIPNAME.$cti write INACK 0x01
	$_CHIPNAME.$cti write INACK 0x00
}
