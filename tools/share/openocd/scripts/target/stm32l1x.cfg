#
# stm32l1 devices support both JTAG and SWD transports.
#

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]
source [find gdb_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32l1
}

if { [info exists CORE_RESET] } {
	set _CORE_RESET $CORE_RESET
} else {
	set _CORE_RESET 0
}

if { [info exists CONNECT_UNDER_RESET] } {
   set _CONNECT_UNDER_RESET $CONNECT_UNDER_RESET
} else {
   set _CONNECT_UNDER_RESET 0
}

if { [info exists ENABLE_LOW_POWER] } {
   set _ENABLE_LOW_POWER $ENABLE_LOW_POWER
} else {
   set _ENABLE_LOW_POWER 0
}

if { [info exists STOP_WATCHDOG] } {
   set _STOP_WATCHDOG $STOP_WATCHDOG
} else {
   set _STOP_WATCHDOG 0
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 10kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x2800
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      # See STM Document RM0038
      # Section 30.6.3 - corresponds to Cortex-M3 r2p0
      set _CPUTAPID 0x4ba00477
   } else {
      # SWD IDCODE (single drop, arm)
      set _CPUTAPID 0x2ba01477
   }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
set _TARGETNAME $_CHIPNAME.cpu

dap create $_CHIPNAME.dap -chain-position $_TARGETNAME
target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num 0 -gdb-max-connections 2
tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE0040000

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 1

# flash size will be probed
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME stm32lx 0x08000000 0 0 0 $_TARGETNAME

# check for second flash bank
if { [regexp -nocase {stm32l15..e.x}  $_CHIPNAME] || [regexp -nocase {stm32l162.e.x}  $_CHIPNAME] || [regexp -nocase {stm32l151vdyxx} $_CHIPNAME] || [regexp -nocase {stm32l152vdtxx} $_CHIPNAME] || [regexp -nocase {stm32l162vdyxx} $_CHIPNAME] } {
	# STM32L151/152/162xE 512K & STM32L151/152/162VD(T/Y)xX 384K have a dual bank flash (Cat.5 device, high density).
	# Add the second flash bank.
	set _FLASHNAME $_CHIPNAME.flash1
	flash bank $_FLASHNAME stm32lx 0x8040000 0 0 0 $_TARGETNAME
} else {
	if { [regexp -nocase {stm32l15.qdhx}  $_CHIPNAME] || [regexp -nocase {stm32l15.qchx}  $_CHIPNAME] || [regexp -nocase {stm32l15.zdtx}  $_CHIPNAME] || [regexp -nocase {stm32l15.zctx}  $_CHIPNAME] || [regexp -nocase {stm32l15.rctxa} $_CHIPNAME] || [regexp -nocase {stm32l15.vctxa} $_CHIPNAME] || [regexp -nocase {stm32l15.vdtx}  $_CHIPNAME] || [regexp -nocase {stm32l15.rdtx}  $_CHIPNAME] || [regexp -nocase {stm32l15.rdyx}  $_CHIPNAME] || [regexp -nocase {stm32l162qdhx}  $_CHIPNAME] || [regexp -nocase {stm32l162zdtx}  $_CHIPNAME] || [regexp -nocase {stm32l162rctxa} $_CHIPNAME] || [regexp -nocase {stm32l162vctxa} $_CHIPNAME] || [regexp -nocase {stm32l162vdtx}  $_CHIPNAME] || [regexp -nocase {stm32l162rdtx}  $_CHIPNAME] || [regexp -nocase {stm32l162rdyx}  $_CHIPNAME] } {
		# STM32L151/152/162xDxxx 384K & STM32L151/152/162xCxxx 256K have a dual bank flash (Cat.4 device).
		# Add the second flash bank.
		set _FLASHNAME $_CHIPNAME.flash1
		flash bank $_FLASHNAME stm32lx 0x8030000 0 0 0 $_TARGETNAME
	}
}

if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 4000
}
adapter speed $_CLOCK_FREQ

adapter srst delay 100
if {[using_jtag]} {
	jtag_ntrst_delay 100
}

if {![using_hla]} {
	global _CORE_RESET

	if { $_CORE_RESET == 1 } {
		# Only resetting Core
		cortex_m reset_config vectreset
	} else {
		# if srst is not fitted use SYSRESETREQ to
		# perform a soft reset
		cortex_m reset_config sysresetreq
	}
}

$_TARGETNAME configure -event reset-init {
global _CLOCK_FREQ

	# Enable HSI as clock source
	echo "STM32L: Enabling HSI"

	# Set HSION in RCC_CR
	mww 0x40023800 0x00000101

	# Set HSI as SYSCLK
	mww 0x40023808 0x00000001

	adapter speed $_CLOCK_FREQ
}

$_TARGETNAME configure -event examine-end {
global _ENABLE_LOW_POWER
global _STOP_WATCHDOG

	if { $_ENABLE_LOW_POWER == 1 } {
		# Enable debug during low power modes (uses more power)
		# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP
		mmw 0xE0042004 0x00000007 0
	} else {
		# Disable debug during low power modes
		# DBGMCU_CR |= ~(DBG_STANDBY | DBG_STOP | DBG_SLEEP)
		mmw 0xE0042004 0 0x00000007
	}
	if { $_STOP_WATCHDOG == 1 } {
		# Stop watchdog counters during halt
		# DBGMCU_APB1_FZ |= DBG_IWDG_STOP | DBG_WWDG_STOP
		mmw 0xE0042008 0x00001800 0
	} else {
		# Don't stop watchdog counters during halt
		# DBGMCU_APB1_FZ |= ~(DBG_IWDG_STOP | DBG_WWDG_STOP)
		mmw 0xE0042008 0 0x00001800
	}
}

$_CHIPNAME.tpiu configure -event post-enable {
	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
	# change this value accordingly to configure trace pins
	# assignment
	mmw 0xE0042004 0x00000020 0
}

proc first_gdb_attach_hook {} {
global _CONNECT_UNDER_RESET

	# Needed to be able to use the connect_assert_srst in reset_config
	# otherwise, wrong value when reading device flash size register
	if { $_CONNECT_UNDER_RESET == 1 } {
		reset init
	}
}

$_TARGETNAME configure -event gdb-attach { gdb_attach_hook }
$_TARGETNAME configure -event gdb-detach { gdb_detach_hook }
