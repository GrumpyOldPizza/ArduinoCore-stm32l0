# script for stm32wlx family

# stm32wl devices support both JTAG and SWD transports.
#
# Important:
#  - This configuration file allows the debug only one core, the selection
#    is ensured by specifying the variable AP_NUM to 0 (CM4) or 1 (CM0P)
#  - To auto-enable CM0 plus using C2BOOT bit, set WKUP_CM0P
#  - HLA adapters are not supported as they do not support multicore and CTI
#
# Configuration variables (default values)
#   CHIPNAME             (stm32wlx)
#   BOARDNAME            .
#   CPUTAPID             (jtag ? 0x6ba00477 : 0x6ba02477)
#   WORKAREASIZE         (0x2000)
#   GDB_PORT             (3333)
#   AP_NUM               (0)
#   WKUP_CM0P            (0)
#   USE_CTI              (0)
#     AP_X_CAN_HALT      (USE_CTI ? 1 : 0) where X is 0 or 1
#     AP_X_CAN_BE_HALTED (USE_CTI ? 1 : 0) where X is 0 or 1
#   CONNECT_UNDER_RESET  (0)
#   CORE_RESET           (0)
#   ENABLE_LOW_POWER     (0)
#   STOP_WATCHDOG        (0)
#   CLOCK_FREQ           (4000)

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]
source [find gdb_helper.tcl]

### Configuration Validation ##################################################

# initialize CHIPNAME
if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32wlx
}

# initialize CPUTAPID
if { ![info exists CPUTAPID] } {
	if { [using_jtag] } {
		set CPUTAPID 0x6ba00477
	} else {
		# SWD IDCODE (single drop, arm)
		set CPUTAPID 0x6ba02477
	}
}

# jtag scan chain
swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if {[using_jtag]} {
	swj_newdap $_CHIPNAME bs -irlen 5
}

if {[using_hla]} {
	echo "Error : HLA adapters does not support multicore debugging"
	shutdown
}

# setup the Work-area start address and size
# Work-area is a space in RAM used for flash programming

# Memory map for known devices:
# STM32WL   x5JC   x5JB   x5J8
#   FLASH   256    128    64
#   SRAM1   32     16     0
#   SRAM2   32     32     20

# Use SRAM2 as work area (some devices do not have SRAM1):
set WORKAREASTART_CM4   0x20008000
set WORKAREASTART_CM0P  0x2000A000

# By default use 8kB
# if { ![info exists WORKAREASIZE] } {
	set WORKAREASIZE 0x2000
# }

# initialize CONNECT_UNDER_RESET
if { [info exists CONNECT_UNDER_RESET] } {
	set _CONNECT_UNDER_RESET $CONNECT_UNDER_RESET
} else {
	set _CONNECT_UNDER_RESET 0
}

# initialize CORE_RESET
if { [info exists CORE_RESET] } {
	set _CORE_RESET $CORE_RESET
} else {
	set _CORE_RESET 0
}

# initialize ENABLE_LOW_POWER
if { [info exists ENABLE_LOW_POWER] } {
	set _ENABLE_LOW_POWER $ENABLE_LOW_POWER
} else {
	set _ENABLE_LOW_POWER 0
}

# initialize STOP_WATCHDOG
if { [info exists STOP_WATCHDOG] } {
	set _STOP_WATCHDOG $STOP_WATCHDOG
} else {
	set _STOP_WATCHDOG 0
}

# initialize GDB_PORT
if { ![info exists GDB_PORT] } {
	set GDB_PORT 3333
}

# initialize AP_NUM
if { ![info exists AP_NUM] } {
	set AP_NUM 0
} elseif { $AP_NUM != 0 && $AP_NUM != 1 } {
	echo "Error : unsupported AP_NUM '$AP_NUM', should be either 0 or 1"
	shutdown
}

# initialize WKUP_CM0P
if { ![info exists WKUP_CM0P] } {
	set WKUP_CM0P 0
}

# initialize USE_CTI
if { ![info exists USE_CTI] } {
	set USE_CTI 0
}

# initialize AP_X_CAN_HALT and AP_X_CAN_BE_HALTED (X is 0 or 1)
# forced to 0 if USE_CTI == zero
# else defaulted to 1 if not specified
if { $USE_CTI == 0 } {
	set AP_0_CAN_HALT 0
	set AP_0_CAN_BE_HALTED 0
	set AP_1_CAN_HALT 0
	set AP_1_CAN_BE_HALTED 0
} else {
	if { ![info exists AP_0_CAN_HALT] } {
		set AP_0_CAN_HALT 1
	}
	if { ![info exists AP_0_CAN_BE_HALTED] } {
		set AP_0_CAN_BE_HALTED 1
	}
	if { ![info exists AP_1_CAN_HALT] } {
		set AP_1_CAN_HALT 1
	}
	if { ![info exists AP_1_CAN_BE_HALTED] } {
		set AP_1_CAN_BE_HALTED 1
	}
}

# intialize CLOCK_FREQ
if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 4000
}

adapter speed $_CLOCK_FREQ

adapter srst delay 100
if {[using_jtag]} {
	jtag_ntrst_delay 100
}

if { $AP_NUM == 0} {
	# debug Cortex-M4 only
	target create $_CHIPNAME.cm4 cortex_m -endian little -dap $_CHIPNAME.dap -ap-num 0 -gdb-port $GDB_PORT -gdb-max-connections 2

	# create TPIU for SWV
	tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE0040000

	# create CTI to be able to stop a CTI previously configured, even if we do not use CTI
	cti create $_CHIPNAME.cm4_cti -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE0043000

	$_CHIPNAME.cm4 configure -work-area-phys $WORKAREASTART_CM4 -work-area-size $WORKAREASIZE -work-area-backup 1
	flash bank $_CHIPNAME.cm4.flash stm32l4x 0 0 0 0 $_CHIPNAME.cm4

	# Commented, reset everything after programming the executables
	# avoid reseting the target in dual core mode
	# $_CHIPNAME.cm4 configure -event gdb-flash-erase-start "soft_reset_halt"
	# $_CHIPNAME.cm4 configure -event gdb-flash-write-end "soft_reset_halt"

	$_CHIPNAME.cm4 configure -event examine-end {
		global _ENABLE_LOW_POWER
		global _STOP_WATCHDOG
		global USE_CTI

		# Disable corresponding CTI by default
		stm32wlx_cti_stop_one cm4_cti

		if { $USE_CTI == 1 } {
			stm32wlx_cti_start_cm4_cti
		}

		if { $_ENABLE_LOW_POWER == 1 } {
			# Enable debug during low power modes (uses more power)
			# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP
			mmw 0xE0042004 0x00000007 0
		} else {
			# Disable debug during low power modes
			# DBGMCU_CR |= ~(DBG_STANDBY | DBG_STOP | DBG_SLEEP)
			mmw 0xE0042004 0 0x00000007
		}

		if { $_STOP_WATCHDOG == 1 } {
			# Stop watchdog counters during halt
			# DBGMCU_APB1_FZR1 |= DBG_IWDG_STOP | DBG_WWDG_STOP
			mmw 0xE004203C 0x00001800 0
		} else {
			# Don't stop watchdog counters during halt
			# DBGMCU_APB1_FZR1 |= ~(DBG_IWDG_STOP | DBG_WWDG_STOP)
			mmw 0xE004203C 0 0x00001800
		}

		stm32wlx_wkup_cm0p
	}

	$_CHIPNAME.cm4 configure -event reset-init {
		global _CLOCK_FREQ

		# CPU comes out of reset with MSI_ON | MSI_RDY | MSI Range 4 MHz.
		# Configure system to use MSI 24 MHz clock, compliant with VOS default Range1.
		# 2 WS compliant with VOS=Range1 and 24 MHz.
		mmw 0x58004000 0x00000102 0  ;# FLASH_ACR |= PRFTBE | 2(Latency)
		mmw 0x58000000 0x00000091 0  ;# RCC_CR = MSI_ON | MSI Range 24 MHz

		adapter speed $_CLOCK_FREQ
	}

	proc first_gdb_attach_hook {} {
		global _CONNECT_UNDER_RESET

		# Needed to be able to use the connect_assert_srst in reset_config
		# otherwise, wrong value when reading device flash size register
		if { $_CONNECT_UNDER_RESET == 1 } {
			reset init
		}
	}

	proc last_gdb_detach_hook {} {
		global USE_CTI
		if { $USE_CTI == 1 } {
			stm32wlx_cti_stop_one cm4_cti
		}
		# to close connection if debug mode entered
		shutdown
	}

	$_CHIPNAME.cm4 configure -event gdb-attach { gdb_attach_hook }
	$_CHIPNAME.cm4 configure -event gdb-detach { gdb_detach_hook }

	$_CHIPNAME.cm4 configure -event resume-start {
		global USE_CTI
		if { $USE_CTI == 1 } {
			stm32wlx_cti_prepare_restart_one cm4_cti
		}
	}

	$_CHIPNAME.cm4 configure -event halted {
		global USE_CTI
		if { $USE_CTI == 1 } {
			stm32wlx_cti_prepare_restart_one cm4_cti
		}
	}

	if { $_CORE_RESET == 1 } {
		# Only resetting Core
		$_CHIPNAME.cm4 cortex_m reset_config vectreset
	} else {
		# if srst is not fitted use SYSRESETREQ to
		# perform a soft reset
		$_CHIPNAME.cm4 cortex_m reset_config sysresetreq
	}

} elseif { $AP_NUM == 1 } {
	if { $WKUP_CM0P == 1 } {
		target create $_CHIPNAME.ap0 mem_ap -dap $_CHIPNAME.dap -ap-num 0
		$_CHIPNAME.ap0 configure -event examine-end {
			stm32wlx_wkup_cm0p
		}
	}

	# debug Cortex-M0+ only ####################################################
	target create $_CHIPNAME.cm0p cortex_m -endian little -dap $_CHIPNAME.dap -ap-num 1 -gdb-port $GDB_PORT -gdb-max-connections 2

	# create CTI to be able to stop a CTI previously configured, even if we do not use CTI.
	cti create $_CHIPNAME.cm0p_cti -dap $_CHIPNAME.dap -ap-num 1 -baseaddr 0xF0001000

	$_CHIPNAME.cm0p configure -work-area-phys $WORKAREASTART_CM0P -work-area-size $WORKAREASIZE -work-area-backup 1
	flash bank $_CHIPNAME.cm0p.flash stm32l4x 0 0 0 0 $_CHIPNAME.cm0p

	$_CHIPNAME.cm0p configure -event gdb-flash-erase-start "halt"
	$_CHIPNAME.cm0p configure -event gdb-flash-write-end "halt"

	$_CHIPNAME.cm0p configure -event examine-end {
		global USE_CTI
		# Disable corresponding CTI by default
		stm32wlx_cti_stop_one cm0p_cti
		if { $USE_CTI == 1 } {
			stm32wlx_cti_start_cm0p_cti
		}
	}

	proc first_gdb_attach_hook {} {
		global _CONNECT_UNDER_RESET
		# Needed to be able to use the connect_assert_srst in reset_config
		# otherwise, wrong value when reading device flash size register
		if { $_CONNECT_UNDER_RESET == 1 } {
			reset init
		} else {
			halt
		}
	}

	proc last_gdb_detach_hook {} {
		global USE_CTI
		if { $USE_CTI == 1 } {
			stm32wlx_cti_stop_one cm0p_cti
		}
		# to close connection if debug mode entered
		shutdown
	}

	$_CHIPNAME.cm0p configure -event gdb-attach { gdb_attach_hook }
	$_CHIPNAME.cm0p configure -event gdb-detach { gdb_detach_hook }

	$_CHIPNAME.cm0p configure -event resume-start {
		global USE_CTI
		if { $USE_CTI == 1 } {
			stm32wlx_cti_prepare_restart_one cm0p_cti
		}
	}

	$_CHIPNAME.cm0p configure -event halted {
		global USE_CTI
		if { $USE_CTI == 1 } {
			stm32wlx_cti_prepare_restart_one cm0p_cti
		}
	}

	if { $_CORE_RESET == 1 } {
		echo "Error : Core reset not available on CM0+ core, use software system reset only"
		shutdown
	} else {
		# if srst is not fitted use SYSRESETREQ to perform a soft reset
		$_CHIPNAME.cm0p cortex_m reset_config sysresetreq
	}
}

proc stm32wlx_wkup_cm0p {} {
	global WKUP_CM0P
	# this should be called when $_CHIPNAME.ap0 or $_CHIPNAME.cm4 is selected !
	if { $WKUP_CM0P == 1 } {
		# enable CPU2 boot after reset and after wakeup from Stop or Standby mode
		# PWR_CR4 |= C2BOOT
		mmw 0x5800040C 0x00008000 0
	}
}

# CM4_CTI TRIGIN0 (HALTED) and CM0P_CTI TRIGOUT0 (EDBGRQ) at CTM_CHANNEL_0
# CM5_CTI TRIGOUT0 (EDBGRQ) and CM0P_CTI TRIGIN0 (HALTED) at CTM_CHANNEL_2
proc stm32wlx_cti_config_one {cti on_off can_halt can_be_halted} {
	global _CHIPNAME
	stm32wlx_cti_prepare_restart_one $cti
	$_CHIPNAME.$cti write INEN0 $can_halt
	$_CHIPNAME.$cti write OUTEN0 $can_be_halted
	$_CHIPNAME.$cti enable $on_off
}

proc stm32wlx_cti_start_cm4_cti {} {
	global AP_0_CAN_HALT
	global AP_0_CAN_BE_HALTED
	set can_halt [expr {$AP_0_CAN_HALT ? 0x1 : 0}]
	set can_be_halted [expr {$AP_0_CAN_BE_HALTED ? 0x4 : 0}]
	stm32wlx_cti_config_one cm4_cti on $can_halt $can_be_halted
}

proc stm32wlx_cti_start_cm0p_cti {} {
	global AP_1_CAN_HALT
	global AP_1_CAN_BE_HALTED
	set can_halt [expr {$AP_1_CAN_HALT ? 0x4 : 0}]
	set can_be_halted [expr {$AP_1_CAN_BE_HALTED ? 0x1 : 0}]
	stm32wlx_cti_config_one cm0p_cti on $can_halt $can_be_halted
}

proc stm32wlx_cti_stop_one {cti} {
	stm32wlx_cti_config_one $cti off 0 0
}

proc stm32wlx_cti_prepare_restart_one {cti} {
	global _CHIPNAME
	# Acknowlodge EDBGRQ at TRIGOUT0
	$_CHIPNAME.$cti write INACK 0x01
	$_CHIPNAME.$cti write INACK 0x00
}
