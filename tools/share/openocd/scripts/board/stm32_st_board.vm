## Apache Velocity template
## Please see http://velocity.apache.org/engine/2.0/translations/user-guide_fr.html
##
# This is an $boardName board with a single $mcu.getName() chip
#
# Generated by STM32CubeIDE
# Take care that such file, as generated, may be overridden without any early notice. Please have a look to debug launch configuration setup(s)

#set ($STLINK_DAP = 1)
source [find interface/stlink-dap.cfg]

#if ($isShareableDevice && ($STLINK_DAP == 1))
st-link backend tcp
#elseif ($isShareableDevice && ($STLINK_DAP == 0))
hla_stlink_backend tcp
#end

## Limit work area size to 32K
#if ($mcu.getWorkAreaSize() < (32 * 1024))
#set($Integer = 0)
set WORKAREASIZE 0x$Integer.toHexString($mcu.getWorkAreaSize())
#else
set WORKAREASIZE 0x8000
#end

#if (($dbgInterface.name() == "SWD") && ($STLINK_DAP == 1))
transport select "dapdirect_swd"
#elseif (($dbgInterface.name() == "JTAG") && ($STLINK_DAP == 1))
transport select "dapdirect_jtag"
#elseif (($dbgInterface.name() == "SWD") && ($STLINK_DAP == 0))
transport select "hla_swd"
#elseif (($dbgInterface.name() == "JTAG") && ($STLINK_DAP == 0))
transport select "hla_jtag"
#end

set CHIPNAME $mcu.getName()
set BOARDNAME $boardName

# Enable debug when in low power modes
#if ($isLowPowerModeAllowed)
set ENABLE_LOW_POWER 1
#else
set ENABLE_LOW_POWER 0
#end

# Stop Watchdog counters when halt
#if ($isWatchdogStopWhenHaltedAllowed)
set STOP_WATCHDOG 1
#else
set STOP_WATCHDOG 0
#end

# STlink Debug clock frequency
#set ($CLOCKFREQ = ($dbgInterfaceFrequency.intValue()/1000))
set CLOCK_FREQ $CLOCKFREQ

# Reset configuration
#if (($STLINK_DAP == 1) && $dbgInterface.name() == "SWD" && $resetMode.name() == "CONNECT_UNDER_RESET")
# use hardware reset, connect under reset
# connect_assert_srst needed if low power mode application running (WFI...)
reset_config srst_only srst_nogate connect_assert_srst
set CONNECT_UNDER_RESET 1
set CORE_RESET 0
#elseif (($STLINK_DAP == 1) && $dbgInterface.name() == "SWD" && $resetMode.name() == "HARD")
# use hardware reset
reset_config srst_only srst_nogate
set CONNECT_UNDER_RESET 0
set CORE_RESET 0
#elseif (($STLINK_DAP == 1) && $dbgInterface.name() == "JTAG" && $resetMode.name() == "CONNECT_UNDER_RESET")
# use hardware reset, connect under reset
# connect_assert_srst needed if low power mode application running (WFI...)
reset_config trst_and_srst srst_nogate connect_assert_srst
set CONNECT_UNDER_RESET 1
set CORE_RESET 0
#elseif (($STLINK_DAP == 1) && $dbgInterface.name() == "JTAG" && $resetMode.name() == "HARD")
# use hardware reset
reset_config trst_and_srst
set CONNECT_UNDER_RESET 0
set CORE_RESET 0
#elseif (($STLINK_DAP == 0) && $resetMode.name() == "CONNECT_UNDER_RESET")
# use hardware reset, connect under reset
# connect_assert_srst needed if low power mode application running (WFI...)
reset_config srst_only srst_nogate connect_assert_srst
set CONNECT_UNDER_RESET 1
set CORE_RESET 0
#elseif (($STLINK_DAP == 0) && $resetMode.name() == "HARD")
# use hardware reset
reset_config srst_only srst_nogate
set CONNECT_UNDER_RESET 0
set CORE_RESET 0
#elseif ($resetMode.name() == "SOFT" || $resetMode.name() == "NONE")
# use software system reset if reset done
reset_config none
set CONNECT_UNDER_RESET 0
set CORE_RESET 0
#elseif ($resetMode.name() == "CORE")
# use core reset if reset done
reset_config none
set CONNECT_UNDER_RESET 0
set CORE_RESET 1
#end

# ACCESS PORT NUMBER
set AP_NUM $apNum
# GDB PORT
set GDB_PORT $gdbPort

#if ($mcu.getName().contains("STM32H7") && !$mcu.getName().contains("STM32H750") && !$mcu.getName().contains("STM32H72") && !$mcu.getName().contains("STM32H73"))
set DUAL_BANK 1
#end

#if ($mcu.getName().contains("STM32WL5") || $mcu.getName().contains("STM32H745") || $mcu.getName().contains("STM32H747")|| $mcu.getName().contains("STM32H755") || $mcu.getName().contains("STM32H757"))
set DUAL_CORE 1
#end

# BCTM CPU variables
#if ($allowHalt || $signalHalt)
set USE_CTI 1
#end
#if ($allowHalt)
set AP_${apNum}_CAN_BE_HALTED 1
#end
#if ($signalHalt)
set AP_${apNum}_CAN_HALT 1
#end

#set ($fileSuffix = "x")
#set ($fileExtension = ".cfg")
source [find target/$mcu.getSerie().getName().toLowerCase()$fileSuffix$fileExtension]

#if ($enable == "enable")
# SWV trace
#if ($mcu.getName().contains("STM32H7"))
set USE_SWO 1
#else
set USE_SWO 0
#end
set swv_cmd "$command"
source [find board/swv.tcl]
#end
